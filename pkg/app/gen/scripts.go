//go:build ignore
// +build ignore

package main

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"runtime"
)

func main() {
	f, err := os.Create("scripts.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "//go:build !wasm")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "package app")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "// Code generated by Bhojpur Web - Application Framework (go generate); DO NOT EDIT.")
	fmt.Fprintln(f)

	gen := []struct {
		Var      string
		Filename string
	}{
		{Var: "wasmExecJS", Filename: filepath.Join(
			runtime.GOROOT(),
			"misc",
			"wasm",
			"wasm_exec.js",
		)},
		{Var: "appJS", Filename: "gen/app.js"},
		{Var: "appWorkerJS", Filename: "gen/app-worker.js"},
		{Var: "manifestJSON", Filename: "gen/manifest.webmanifest"},
		{Var: "appCSS", Filename: "gen/app.css"},
	}

	fmt.Fprintln(f, "const(")

	for _, g := range gen {
		b, err := ioutil.ReadFile(g.Filename)
		if err != nil {
			panic(err)
		}

		fmt.Fprintf(f, "%s = %q", g.Var, b)
		fmt.Fprintln(f)
		fmt.Fprintln(f)
	}

	fmt.Fprintln(f, ")")
}
