// Application source code generated by Bhojpur Web framework. (@generated) DO NOT EDIT.
// Package testdata generated using webctl template processor.
// sources:
// views/blocks/block.tpl
// views/footer.tpl
// views/header.tpl
// views/index.tpl
package testdata

import (
	"github.com/bhojpur/web/pkg/synthesis"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bhojpurRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bhojpurFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bhojpurFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bhojpurFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bhojpurFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bhojpurFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bhojpurFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bhojpurFileInfo) Sys() interface{} {
	return nil
}

var _viewsBlocksBlockTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\xc9\x4f\xce\x56\xaa\xad\xe5\xb2\xc9\x30\xb4\xf3\x48\xcd\xc9\xc9\xd7\x51\x00\x8b\x15\x2b\xda\xe8\x67\x18\xda\x71\x55\x57\xa7\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xfd\xa1\x7a\xf6\x32\x00\x00\x00")

func viewsBlocksBlockTplBytes() ([]byte, error) {
	return bhojpurRead(
		_viewsBlocksBlockTpl,
		"views/blocks/block.tpl",
	)
}

func viewsBlocksBlockTpl() (*asset, error) {
	bytes, err := viewsBlocksBlockTplBytes()
	if err != nil {
		return nil, err
	}

	info := bhojpurFileInfo{name: "views/blocks/block.tpl", size: 50, mode: os.FileMode(420), modTime: time.Unix(1642648576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsFooterTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xce\x31\x4e\xc5\x30\x0c\x00\xd0\xbd\xa7\xb0\x3c\x43\x23\x56\x94\x46\x02\x26\x24\x06\x6e\x80\xf2\x1b\xb7\x31\xa4\x49\xe5\xf8\xff\x22\xa2\xdc\x9d\x81\x8a\xfd\x0d\xaf\xb5\x40\x0b\x67\x02\x5c\x4a\x51\x12\xec\x7d\xb0\x51\xa0\xf2\x0f\x4d\xf8\xb0\x7f\xa3\x1b\xec\x4c\x59\x49\x9c\xad\x9b\x4f\xc9\x59\x0f\x51\x68\x99\x30\xaa\xee\xf5\xd1\x98\xe3\x38\xc6\x4b\x2c\x9f\xfb\x55\xee\xe7\x92\xeb\x35\x29\xe7\x75\x9c\xcb\x86\xa0\x5e\x56\xd2\x09\x3f\x2e\xc9\xe7\x2f\x74\xcf\x7f\x0e\x5e\xfe\x1d\xbc\x0b\xdf\xbc\x12\xbc\xf1\xc6\x4a\xc1\x1a\xef\xee\xe0\x35\x07\xf6\x23\x3c\xa5\x04\xc2\x6b\xd4\x0a\x42\x95\xe4\x46\x61\xb4\xe6\x7c\x98\xf3\x35\xb4\x46\x39\xf4\xfe\x1b\x00\x00\xff\xff\xd1\x5a\x98\xba\xcc\x00\x00\x00")

func viewsFooterTplBytes() ([]byte, error) {
	return bhojpurRead(
		_viewsFooterTpl,
		"views/footer.tpl",
	)
}

func viewsFooterTpl() (*asset, error) {
	bytes, err := viewsFooterTplBytes()
	if err != nil {
		return nil, err
	}

	info := bhojpurFileInfo{name: "views/footer.tpl", size: 204, mode: os.FileMode(420), modTime: time.Unix(1642696926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsHeaderTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8b\xcd\x4a\xc3\x40\x14\x85\xf7\x7d\x8a\xdb\xac\x6d\x26\xa1\x51\x8b\xb4\x85\x26\xf8\xd3\x16\xac\x0a\x12\xba\xec\xa4\x63\xa6\xa5\xed\x8c\x99\x68\xb4\x21\x0b\x57\x2e\x74\x2b\xb8\x70\x23\xdc\x82\x48\x05\xf1\x01\xea\xab\xdc\x47\x11\x5b\xc1\xb3\xfb\xbe\x73\x4e\x9e\x0f\xc5\xc5\x68\x26\xc0\x92\x62\x30\x14\x89\x55\x14\xa5\xfa\x68\x1a\x83\x49\xa2\x86\x25\xd3\x54\x9b\x3d\xc6\x3c\x9b\x6b\x9b\x4f\x54\x6c\xb4\x4a\xed\x48\x4d\x59\x25\xdc\x31\x27\xbb\xe7\xd1\x9c\x07\x11\x0b\x2f\x7d\xaf\x96\x86\xfc\xba\xda\x66\xad\xbf\x1c\x9c\xee\x33\x2e\xb3\x20\xf2\x06\x47\x6a\x3b\xeb\xb5\x9d\xee\xad\xec\xcd\x8f\xcf\x5a\x9d\xb1\x5f\x73\x3a\x6d\x93\x38\x59\xd0\xf5\xfc\xc3\x56\xbf\x1f\x64\xcc\xb8\x55\x87\x4d\x54\xac\x6c\x3d\x8b\xad\x66\xa9\x2e\x13\x30\xa3\xb9\x68\x58\xae\xbe\x59\xb3\xdb\xf4\xa5\x1a\xeb\xab\x04\x42\xc1\xa1\x02\x84\x1f\xb4\x78\x20\x7c\x21\x7c\xa7\xc5\x1d\xe1\x27\xac\xe1\x9b\xf0\x8b\x70\x05\x84\xcf\x1b\xb7\x24\x5c\x6d\x01\x21\x12\x2e\x81\xf0\x89\x16\x8f\x84\x6f\x9b\xc9\x6f\x47\x88\x1b\x7d\x0f\x84\xaf\xff\x1f\x28\x97\xcb\x75\x26\xdd\x66\x29\xcf\xc5\x6c\x58\x14\x3f\x01\x00\x00\xff\xff\x1c\x3f\x9f\x4f\x2d\x01\x00\x00")

func viewsHeaderTplBytes() ([]byte, error) {
	return bhojpurRead(
		_viewsHeaderTpl,
		"views/header.tpl",
	)
}

func viewsHeaderTpl() (*asset, error) {
	bytes, err := viewsHeaderTplBytes()
	if err != nil {
		return nil, err
	}

	info := bhojpurFileInfo{name: "views/header.tpl", size: 301, mode: os.FileMode(420), modTime: time.Unix(1642696937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xcd\x4a\xc0\x30\x10\x84\xcf\xcd\x53\x8c\xbd\xdb\x40\x8f\xb2\xe4\xe0\xcf\x59\xc1\x60\xf1\xd8\x9f\x85\x54\x13\x12\xda\x78\x90\x90\x77\x97\x24\xf5\x20\x9e\x66\x77\xf8\x86\x9d\xa5\x9b\xc7\xe7\x07\xfd\xfe\xf2\x04\x13\x9d\x55\x82\x9a\x00\x64\x78\xde\xca\x00\x50\xdc\xa3\x65\x75\x6f\xfc\x47\xf8\x3a\x30\xf1\x82\x5b\x4c\x6c\x57\xef\x18\x9a\x5d\xb0\x73\x64\x92\x8d\x2a\x51\xf9\x9b\xa5\xc5\x6f\xdf\x4a\x88\x2e\xa5\x78\x71\xe8\x17\xeb\xd7\xcf\x3e\xe7\xbf\x6e\x89\xf0\xf1\xcf\xae\xf0\x29\xab\x0c\x31\xd8\x02\x88\x8e\xcc\xa8\x52\xc2\xa0\xcb\x49\xe4\x4c\xd2\x8c\x4a\x74\x14\x14\xb4\xd9\x4f\xec\x27\x5e\xbd\xe3\xb7\xf9\xb8\x43\xe1\xae\xa5\x92\xa1\x55\x6c\xcd\x48\xd6\x7f\x7f\x02\x00\x00\xff\xff\x98\x11\xfd\x2f\x06\x01\x00\x00")

func viewsIndexTplBytes() ([]byte, error) {
	return bhojpurRead(
		_viewsIndexTpl,
		"views/index.tpl",
	)
}

func viewsIndexTpl() (*asset, error) {
	bytes, err := viewsIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bhojpurFileInfo{name: "views/index.tpl", size: 262, mode: os.FileMode(420), modTime: time.Unix(1642648446, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bhojpur[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bhojpur[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bhojpur))
	for name := range _bhojpur {
		names = append(names, name)
	}
	return names
}

// _bhojpur is a table, holding each asset generator, mapped to its name.
var _bhojpur = map[string]func() (*asset, error){
	"views/blocks/block.tpl": viewsBlocksBlockTpl,
	"views/footer.tpl":       viewsFooterTpl,
	"views/header.tpl":       viewsHeaderTpl,
	"views/index.tpl":        viewsIndexTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by Bhojpur Webctl.
// For example if you run webctl generate on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then, AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bhojpurTree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bhojpurTree struct {
	Func     func() (*asset, error)
	Children map[string]*bhojpurTree
}

var _bhojpurTree = &bhojpurTree{nil, map[string]*bhojpurTree{
	"views": &bhojpurTree{nil, map[string]*bhojpurTree{
		"blocks": &bhojpurTree{nil, map[string]*bhojpurTree{
			"block.tpl": &bhojpurTree{viewsBlocksBlockTpl, map[string]*bhojpurTree{}},
		}},
		"footer.tpl": &bhojpurTree{viewsFooterTpl, map[string]*bhojpurTree{}},
		"header.tpl": &bhojpurTree{viewsHeaderTpl, map[string]*bhojpurTree{}},
		"index.tpl":  &bhojpurTree{viewsIndexTpl, map[string]*bhojpurTree{}},
	}},
}}

// RestoreAsset restores an Asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}

func assetFS() *synthesis.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bhojpurTree.Children {
		return &synthesis.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
